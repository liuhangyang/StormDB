/*************************************************************************
	> File Name: StormDB_Client.cpp
	> Author:yanglongfei 
	> Mail:yanglongfei@xiyoulinux.org 
	> Created Time: 2017年01月21日 星期六 21时41分08秒
 ************************************************************************/

#include<iostream>
#include <string.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <errno.h>
#include "./StormDB_Client.h"
std::pair<std::string,int> arr[]={
    std::make_pair("SET",0),
    std::make_pair("GET",1),
    std::make_pair("DEL",2),
    std::make_pair("HSET",3),
    std::make_pair("HGET",4),
    std::make_pair("HDEL",5),
    std::make_pair("HGETALL",6),
    std::make_pair("LSET",7),
    std::make_pair("LGET",8),
    std::make_pair("LPUSH",9),
    std::make_pair("LPOP",10),
    std::make_pair("RPUSH",11),
    std::make_pair("RPOP",12),
    std::make_pair("INCR",13),
    std::make_pair("DECR",14),
    std::make_pair("APPEND",15)
};
StrToInt Client::IntMap(arr,arr + sizeof(arr)/sizeof(arr[0]));
Client::Client(void){
    _init(IP,PORT);
}
Client::Client(const std::string &host){
    _init(host,PORT);
}
Client::Client(const std::string &host, int port){
    _init(host,port);
}
Client::~Client(void){
    close(_socket);
}
void 
Client::set(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
std::string
Client::get(const std::vector<std::string> &data){
    _send((Command()<<data).getbuffer());
}
void
Client::del(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
long Client::append(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
bool
Client::hset(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
bool
Client::hget(const std::vector<std::string> &data){
    _send((Command()  <<data).getbuffer());
}
void
Client::hdel(const std::vector<std::string> &data){
    _send((Command()  <<data).getbuffer());
}
void
Client::hgetall(const std::vector<std::string> &data,string_vector &fields,string_vector &values){
    _send((Command() << data).getbuffer());
    string_vector all;
//    _recv_multi_bulk_reply(all);

    for(string_vector::size_type i = 0;i<all.size() /2;i++){
        fields.push_back(all[i * 2]);
        values.push_back(all[i*2+1]);

        }
}
void 
Client::lset(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
    _recv_ok_reply();
}
std::string 
Client::lget(const std::vector<std::string> &data){
    _send((Command() << data ).getbuffer());
}

void
Client::lpush(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
std::string
Client::lpop(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
void 
Client::rpush(const std::vector<std::string> &data){
    _send((Command() <<data).getbuffer());
}
std::string
Client::rpop(const std::vector<std::string> &data){
    _send((Command() <<data).getbuffer());
}
long 
Client::incr(const std::vector<std::string> &data){
    _send((Command() << data).getbuffer());
}
long
Client::decr(const std::vector<std::string> &data){
    _send((Command() <<data).getbuffer());
}
void Client::_recv_ok_reply(){
 //   if()
}
bool 
Client::input(std::vector<std::string> &str){
    int i = 0;
    std::cout << IP <<  ":" << PORT << ">";
    std::string temp;
    std::getline(std::cin,temp);
    char str1[1024];
    temp.append("\n");
    int j = 0;
    for(int i= 0;i<temp.size();i++){
        if(temp[i] == '\n'){
            if(strlen(str1) > 0){
                str1[j] = '\0';
                str.push_back(str1);
            }
            break;
        }else if(temp[i] == ' '){
            if(strlen(str1) >0){
                str1[j]= '\0';
                str.push_back(str1);
            }
            j = 0;
            str1[0]='\0';
        }else{
            str1[j] = temp[i];
            j++;
        } 
    }
    const char* result; 
    Judge judge;
    result  = judge.JudgeCommand(str[0],str.size()-1);
    if(strcmp(result,"OK") == 0){
        return true;
    }else{
        std::cout << result <<std::endl;
        return false;   
    }
}
void
Client::start(){
    for(;;){
        std::vector<std::string> str;
        string_vector fields;
        string_vector values;
        if(input(str)){
            toUpper(str[0]);
            if(strcmp(str[0].c_str(),"QUIT")==0){
                break;
            }
            int t = IntMap[str[0]];
            switch(t){
                case 0:
                    set(str);
                    break;
                case 1:
                    get(str);
                    break;
                case 2:
                    del(str);
                    break;
                case 3:
                    hset(str);
                    break;
                case 4:
                    hget(str);
                    break;
                case 5:
                    hdel(str);
                    break;
                case 6:
                    hgetall(str,fields,values);
                    break;
                case 7:
                    lset(str);
                    break;
                case 8:
                    lget(str);
                    break;
                case 9:
                    lpush(str);
                    break;
                case 10:
                    lpop(str);
                    break;
                case 11:
                    rpush(str);
                    break;
                case 12:
                    rpop(str);
                    break;
                case 13:
                    incr(str);
                    break;
                case 14:
                    decr(str);
                case 15:
                    append(str);
                default:
                    break;
        }   }
    }
}
void
Client::_init(const std::string &host,int port){
    struct sockaddr_in serveraddr;
    bzero(&serveraddr,sizeof(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_port = htons(port);
    inet_pton(AF_INET,host.c_str(),&serveraddr.sin_addr);
    _socket = socket(AF_INET,SOCK_STREAM,0);
    int ret = connect(_socket,(struct sockaddr*)&serveraddr,sizeof(serveraddr));
    if(ret < 0){
        perror("error:socket connect!");
        exit(1);
    }
}
std::string intToByte(int length){
    char arr[8];
     arr[0]=(char)(length & 0x7f);
     arr[1]=(char)((length >> 7)&0x7f);
     arr[2]=(char)((length >>14)&0x7f);
     arr[3]=(char)((length >>21)&0x7f);
     arr[4]=(char)(type & 0x7f);
     arr[5]=(char)((type >> 7)&0x7f);
     arr[6]=(char)((type >>14)&0x7f);
     arr[7]=(char)((type >>21)&0x7f);
        //printf("%d\n",arr[0]);
        std::string Str;
        for(int i=0;i<8;i++){
           // printf("ddddd%d",arr[i]);
            Str+=arr[i];
        }
       // printf("\n");
        //printf("byte:%d\n",strlen(arr));
       // std::cout << "Str:" <<Str<<"  "<<Str.size()<<std::endl;
        return Str;
}
void 
Client::_send(const std::string& msg){
    printf("dddd\n");
    int64_t m= (int64_t)msg.size();
    int64_t be64 = htobe64(m); 
    char buf[1024];
    memcpy(buf,(const char*)&be64,sizeof(be64));
    strcat(buf,msg.c_str());
    printf("buf:%s\n",buf);
    //char buf[1024];
    int t = write(_socket,buf,strlen(buf));
    printf("t=%d\n",t);
    //read(_socket,buf,1024);
    //printf("%s\n",buf);
}


